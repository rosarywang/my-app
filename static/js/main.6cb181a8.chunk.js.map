{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","calculateWinner","squares","lines","i","length","a","b","c","Board","this","elements","j","push","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","location","ascending","slice","currentLocation","setState","concat","step","status","currentHistory","winner","moves","map","move","desc","column","row","Math","floor","locaVal","currentLocaVal","jumpTo","sort","key","handleClick","sortMoves","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6cb181a8.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    return (\r\n    <button className=\"square\" onClick={ props.onClick }>\r\n        {props.value}\r\n    </button>\r\n    );\r\n  }\r\n\r\n  function calculateWinner(squares) {\r\n      const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n      ];\r\n      for (let i = 0; i < lines.length; i++){\r\n          const [a, b, c] = lines[i];\r\n          if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c]){\r\n              return squares[a];\r\n          }\r\n      }\r\n      return null;\r\n  }\r\n  \r\n  class Board extends React.Component {\r\n\r\n    renderSquare(i) {\r\n      return (<Square \r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}/>);\r\n    }   \r\n  \r\n    render() {  \r\n      const elements = [];\r\n      for (let i = 0; i < 3; i++){\r\n        let squares = [];\r\n        for (let j = 0; j < 3; j++){\r\n        squares.push(this.renderSquare(i*3+j));\r\n        }\r\n        elements.push(<div className=\"board-row\">{squares}</div>);\r\n      }\r\n      return (\r\n        <div>\r\n          {elements}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Game extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n          history: [\r\n            {\r\n              squares: Array(9).fill(null)\r\n            }\r\n          ],\r\n          stepNumber: 0,\r\n          xIsNext: true,\r\n          location: Array(9).fill(null),\r\n          ascending : true,\r\n        };\r\n    }\r\n\r\n    handleClick(i){\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const currentHistory = history[history.length - 1];\r\n        const squares = currentHistory.squares.slice();\r\n        const currentLocation = this.state.location;\r\n        currentLocation[this.state.stepNumber + 1] = i;       \r\n        if(calculateWinner(squares) || squares[i]){\r\n            return;\r\n        }\r\n        \r\n        squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n        this.setState({\r\n            history: history.concat([\r\n              {\r\n                squares:squares\r\n              }\r\n            ]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n            location: currentLocation,         \r\n        });         \r\n    } \r\n    \r\n    jumpTo(step) {\r\n      this.setState({\r\n        stepNumber: step,\r\n        xIsNext: (step % 2) === 0\r\n      });\r\n    }\r\n\r\n    sortMoves(){           \r\n        this.setState({\r\n          ascending: !this.state.ascending,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const currentHistory = history[this.state.stepNumber];\r\n        const winner = calculateWinner(currentHistory.squares);\r\n        const location = this.state.location;\r\n        const moves = history            \r\n            .map((step, move) => {\r\n            const desc = move?\r\n                'Go to move #' + move:\r\n                'Go to game start';\r\n            const currentLocation = move? location[move] : -1;\r\n            const column = currentLocation === -1? -1 : currentLocation % 3+1;\r\n            const row = currentLocation === -1? -1 : Math.floor(currentLocation / 3)+1;\r\n            const locaVal = move && move !== this.state.stepNumber?\r\n                '('+row+', '+column+')':\r\n                '';\r\n            const currentLocaVal = move && move === this.state.stepNumber?\r\n                '('+row+', '+column+')':\r\n                '';\r\n            return (\r\n                <li key={move}>\r\n                    <b>{currentLocaVal} </b>  \r\n                    <small>{locaVal} </small>                    \r\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n                </li>\r\n            );\r\n        })\r\n        .sort((a, b) => this.state.ascending? \r\n          (a.key > b.key ? 1 : -1) :\r\n          (a.key < b.key ? 1 : -1));        \r\n\r\n        let status;\r\n        if(winner){\r\n            status = \"Winner: \" + winner;\r\n        } else{\r\n            status = \"Next player: \" + (this.state.xIsNext ? \"X\": \"O\");\r\n        }\r\n\r\n        return (\r\n            <div className=\"game\">\r\n            <div className=\"game-board\">\r\n                <Board \r\n                    squares={currentHistory.squares}\r\n                    onClick={i => this.handleClick(i)}\r\n                />\r\n            </div>\r\n            <div className=\"game-info\">\r\n                <div>{status}</div>\r\n                <button onClick={() => this.sortMoves()}>Sort Moves</button>\r\n                <ol>{moves}</ol>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n  }\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n  \r\n  "],"sourceRoot":""}